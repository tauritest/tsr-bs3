// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] This is defined recursively in LESS, but Sass supports real loops

// screen grid columns list block without gutter
@mixin make-grid-columns-no-gutter($i: 1, $list: ".col-xxxs-#{$i}, .col-xxs-#{$i}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}, .col-xl-#{$i}, .col-xxl-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-xxxs-#{$i}, .col-xxs-#{$i}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}, .col-xl-#{$i}, .col-xxl-#{$i}";
  }
  #{$list} {
    // Inner gutter via padding
    padding-left:  0;//($grid-gutter-width / 2);
    padding-right: 0;//($grid-gutter-width / 2);
  }
}
// screen grid columns list block without gutter, with borders
@mixin make-grid-bordered-columns ($i:1, $list: ".col-xxxs-#{$i}, .col-xxs-#{$i}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}, .col-xl-#{$i}, .col-xxl-#{$i}"){

  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-xxxs-#{$i}, .col-xxs-#{$i}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}, .col-xl-#{$i}, .col-xxl-#{$i}";
  }

  #{$list} {
    // Inner gutter via padding
    padding-left:  0;
    padding-right: 0;
    border-right: 1px solid $gray-light;
    border-bottom: 1px solid $gray-light;
    height: 100%;
    margin-top: -1px;
    &:before {
      content:"";
      clear: both;
      display: block;
      background-color: $gray-light;
      width: 100%;
      height: 1px;
    }

  }

  //border-top: 1px solid $gray-light;
  border-left:1px solid $gray-light!important;
  //border-right:1px solid $gray-light!important;
}

// small screen grid columns
@mixin make-grid-columns($i: 1, $list: ".col-xxxs-#{$i}, .col-xxs-#{$i}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-xxxs-#{$i}, .col-xxs-#{$i}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
  }
}

// lg screen grid columns
@mixin make-grid-columns-lg($i: 1, $list: ".col-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-lg-#{$i}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:   $grid-gutter-width-large;//($grid-gutter-width + 4 / 2);
    padding-right:  $grid-gutter-width-large;//($grid-gutter-width + 4 / 2);
  }
}

// xl / xxl screen grid columns
@mixin make-grid-columns-xl-xxl($i: 1, $list: ".col-xl-#{$i}, .col-xxl-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-xl-#{$i}, .col-xxl-#{$i}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:   $grid-gutter-width-extra-large;//($grid-gutter-width + 8 / 2);
    padding-right:  $grid-gutter-width-extra-large;//($grid-gutter-width + 8 / 2);
  }
}


// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-#{$class}-#{$i}";
  }
  #{$list} {
    float: left;
  }
}


@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index > 0) {
    .col-#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index == 0) {
    .col-#{$class}-push-0 {
      left: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    .col-#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }
  @if ($type == pull) and ($index == 0) {
    .col-#{$class}-pull-0 {
      right: auto;
    }
  }
  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}


// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, offset);
}
